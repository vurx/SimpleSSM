<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
    <display-name>Archetype Created Web Application</display-name>
    <!--在web.xml中通过contextConfigLocation配置spring，contextConfigLocation 参数定义了要装入的 Spring 配置文件。-->
    <!--如果想装入多个配置文件，可以在 <param-value> 标记中用逗号作分隔符-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring.xml</param-value>
    </context-param>
    <!--1. 字符编码过滤器 2. spring框架提供的对用户的请求和响应流进行字符编码的设置，通常设置为UTF­8-->
    <filter>
        <filter-name>charset</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>charset</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--1. 上下文加载监听器 2. spring框架通过该监听器在web容器加载时自动触发,并读取spring的配置文件创建spring容器后,把配置文件中设置的bean都new出来并存放在spring容器中-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--1. spring mvc框架的核心启动类-->
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    <welcome-file-list>
        <welcome-file>init.do</welcome-file>
    </welcome-file-list>
</web-app>
